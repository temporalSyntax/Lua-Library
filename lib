-- idk where to write these so ill just do it here, commands






local UserInputService = game:GetService("UserInputService")
local pathtocommands = script.Parent.list
local current = 1
local amountofcommands = 1

-- yes or no stuff

local iscommandboxopen = false


-- images

local tickimage = "http://www.roblox.com/asset/?id=3926305904"
local noimage = "http://www.roblox.com/asset/?id=3926305904"
local arrowimage = "http://www.roblox.com/asset/?id=6798365555"


-- tween

local TweenService = game:GetService("TweenService")

-- stuff idk what they mean 


local EnterPressedEvent = Instance.new("BindableEvent")
local EnterPressed = false

local function onEnterPressed(input)
	if input.KeyCode == Enum.KeyCode.Return or input.KeyCode == Enum.KeyCode.KeypadEnter then
		EnterPressed = true
		EnterPressedEvent:Fire()
	end
end

-- where the stuff that idk what they do end

-- paths

local label = script.Parent.list.picker
local commandbox = script.Parent.command
local endingPosition = pathtocommands:FindFirstChild("command"..current)
local cmdname = pathtocommands:FindFirstChild("command"..current).cmdname
local valuetext = pathtocommands:FindFirstChild("command"..current).valuetext
local imagelabel = pathtocommands:FindFirstChild("command"..current).image

local function updatethepaths()
	cmdname = pathtocommands:FindFirstChild("command"..current).cmdname
	valuetext = pathtocommands:FindFirstChild("command"..current).valuetext
	imagelabel = pathtocommands:FindFirstChild("command"..current).image
	commandtype = "folder"
	local typenumber = pathtocommands:FindFirstChild("command"..current).typevalue.Value
	if typenumber == 0 then
		commandtype = "folder"
	elseif typenumber == 1 then
		commandtype = "slider"
	elseif typenumber == 2 then
		commandtype = "toggle"
	elseif typenumber == 3 then
		commandtype = "button"
	end
	--print("THIS IS A "..commandtype)
end


local function tween()
	local tween = TweenService:Create(label, TweenInfo.new(0.1), { Position = endingPosition.Position})
	tween:Play()
end
tween()
label.Visible = true

-- how many children


local function countthem()
	amountofcommands = 0
	for _,v in pairs(pathtocommands:GetChildren()) do
		amountofcommands = amountofcommands + 1
	end
	amountofcommands = amountofcommands - 1
	
end
countthem() 

-- notifications (currently not working)

local amountofnotifications = 0

local function sendnotification(message, amount)
	wait(amount)
	local base = script.Parent.notification
	amountofnotifications = amountofnotifications + 1
	local thisnumber = amountofnotifications
	local newone = base:Clone() newone.Parent = base.Parent	newone.Name = "notification"..amountofnotifications newone.notificationtext.Text = message
	local lastpos
		if amountofnotifications - 1 ~= 0 then
			local last_position = base.Parent:FindFirstChild("notification"..amountofnotifications - 1).Position
			lastpos = last_position
			newone.Position = UDim2.new(lastpos.X, lastpos.Y + UDim.new(0, 65))
		else
			local old_position = base.Position
			lastpos = old_position
			newone.Position = UDim2.new(old_position.X, old_position.Y)
		end
		newone.Visible = true newone.flash.Visible = true
		wait(.3)
		newone.flash.Visible = false
		local startTime = os.clock()
		while newone.Visible do
			if amountofnotifications < thisnumber then
				thisnumber = thisnumber - 1
				newone.Position = UDim2.new(newone.Position.X, newone.Position.Y - UDim.new(0, 65))
			end
		if os.clock() - startTime >= 3 then
			amountofnotifications = amountofnotifications - 1
			newone.Visible = false
			newone:Destroy()
			break 
		end
		wait()
	end
end

-- lemme just do this real quick

pathtocommands.Parent.path.currentthing.Text = current.."/"..amountofcommands -- corrects the position of the thingy

-- update duh image

local function imagechange()
	if commandtype == "folder" then
		imagelabel.Image = arrowimage
		imagelabel.Visible = true
		valuetext.Visible = false	
	elseif commandtype == "slider" then
		imagelabel.Visible = false
		valuetext.Visible = true
	elseif commandtype == "toggle" then
		imagelabel.Visible = false
		valuetext.Visible = true
		valuetext.Text = "OFF"
	end
end

local function debugt()
	local oldcurrent = current
	local number = 0
	while number ~= amountofcommands do
		number = number + 1
		current = number
		updatethepaths()
		imagechange()
	end
	current = oldcurrent
	--sendnotification("fixed it")
end
debugt()

-- commandbox

function commandboxopen(slider)
	commandbox.textinput:CaptureFocus()
	wait()
	commandbox.textinput.Text = ""
	iscommandboxopen = true
	commandbox.Visible = true
	local connection
	connection = EnterPressedEvent.Event:Connect(function()
		commandbox.Visible = false
		iscommandboxopen =false
		connection:Disconnect()
		if slider == true then
			if tonumber(commandbox.textinput.Text) ~= nil then
				valuetext.Text = "< "..tonumber(commandbox.textinput.Text).." >" 
				pathtocommands:FindFirstChild("command"..current).typevalue.amount.Value = commandbox.textinput.Text
			elseif commandbox.textinput.Text == "" then
				sendnotification("that was empty dude", 0)
			else
				sendnotification("you can only use numbers", 0)
			end
		else
			
		end
	end)
end


-- keyboard input

UserInputService.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.Keyboard then
		if input.KeyCode == Enum.KeyCode.KeypadTwo and iscommandboxopen == false then
				if current >= amountofcommands then
					current = 1
					endingPosition = pathtocommands:FindFirstChild("command"..current)
					pathtocommands.Parent.path.currentthing.Text = current.."/"..amountofcommands
					tween() updatethepaths() imagechange() 
					--print(current)
				else
					current = current + 1
					endingPosition = pathtocommands:FindFirstChild("command"..current)
					pathtocommands.Parent.path.currentthing.Text = current.."/"..amountofcommands
					tween() updatethepaths() imagechange() 
					--print(current)
				end
		elseif input.KeyCode == Enum.KeyCode.KeypadEight and iscommandboxopen == false then
				if current <= 1 then
					current = amountofcommands
					endingPosition = pathtocommands:FindFirstChild("command"..current)
					pathtocommands.Parent.path.currentthing.Text = current.."/"..amountofcommands
					tween() updatethepaths() imagechange() 
					--print(current)

				else
					current = current - 1
					endingPosition = pathtocommands:FindFirstChild("command"..current)
					pathtocommands.Parent.path.currentthing.Text = current.."/"..amountofcommands
					tween() updatethepaths() imagechange() 
					--print(current)
				end
		elseif input.KeyCode == Enum.KeyCode.KeypadSix and iscommandboxopen == false then
				if commandtype == "slider" then
					local value = pathtocommands:FindFirstChild("command"..current).typevalue.amount.Value
					pathtocommands:FindFirstChild("command"..current).typevalue.amount.Value = value + 1
					--print(value)
					valuetext.Text = "< "..value.." >"
				end
		elseif input.KeyCode == Enum.KeyCode.KeypadFour and iscommandboxopen == false then
				if commandtype == "slider" then
					local value = pathtocommands:FindFirstChild("command"..current).typevalue.amount.Value
					pathtocommands:FindFirstChild("command"..current).typevalue.amount.Value = value - 1
					--print(value)
					valuetext.Text = "< "..value.." >"
				end
		elseif input.KeyCode == Enum.KeyCode.U and iscommandboxopen == false then
			commandboxopen(false)
		elseif input.KeyCode == Enum.KeyCode.KeypadFive then
			if iscommandboxopen == false and commandtype == "slider" then
				commandboxopen(true)
			elseif iscommandboxopen == false and commandtype == "toggle" then
				if valuetext.Text == "OFF" then
					valuetext.Text = "ON"
				else
					valuetext.Text = "OFF"
				end
			end
		end
	end
end)


UserInputService.InputBegan:Connect(onEnterPressed) -- i will replace this soon
