-- Constants/variables
local MAX_DISPLAY = 10
local currentHighlightIndex = 1 -- This will track the highlight
local currentTabIndexStart = 1 -- This will track the starting index of the displayed tabs
local labels = {}

-- Create the ScreenGui
local Player = game.Players.LocalPlayer
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = Player:WaitForChild("PlayerGui")

local highlight = Instance.new("Frame") -- Don't use global variables

-- Create a Frame for holding the commands
local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 200, 0, MAX_DISPLAY * 25 + 5) -- Adjust height for displayed items
Frame.Position = UDim2.new(0.5, -100, 0.5, -150) -- Adjust position to accommodate context box
Frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
Frame.Parent = ScreenGui

-- Create a TextBox for showing the command context
local contextBox = Instance.new("TextLabel")
contextBox.Size = UDim2.new(0, 200, 0, 50) -- Size of the context box
contextBox.Position = UDim2.new(0.5, -100, 0.5, 130)
contextBox.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
contextBox.TextColor3 = Color3.fromRGB(255, 255, 255)
contextBox.TextSize = 14
contextBox.Text = "Stage One"
contextBox.Parent = ScreenGui

-- Define a table of commands with extra context and actions
local commands = {
	{ 
		name = "Command 1",
		context = "This will execute Command 1",
		action = function() print("Executed Command 1") end
	},
	
	{ 
		name = "Command 2",
		context = "This will execute Command 2",
		action = function() print("Executed Command 2") end
	},
	
	{ 
		name = "Command 3",
		context = "This will execute Command 3",
		action = function() print("Executed Command 3") end
	},
	
	{ name = "Command 4",
		context = "This will execute Command 4",
		action = function() print("Executed Command 4") end
	},
	
	{ name = "Command 5",
		context = "This will execute Command 5",
		action = function() print("Executed Command 5") end 
	},
	
	{ name = "Command 6",
		context = "This will execute Command 6",
		action = function() print("Executed Command 6") end
	},
	
	{ name = "Command 7",
		context = "This will execute Command 7",
		action = function() print("Executed Command 7") end
	},
	
	{ name = "Command 8",
		context = "This will execute Command 8",
		action = function() print("Executed Command 8") end
	},
	
	{ name = "Command 9",
		context = "This will execute Command 9",
		action = function() print("Executed Command 9") end
	},
	
	{ name = "Command 10",
		context = "This will execute Command 10",
		action = function() print("Executed Command 10") end
	},
	
	{ name = "Command 11",
		context = "This will execute Command 11",
		action = function() print("Executed Command 11") end 
	},
}

-- Create TextLabels for commands
local function createLabels()
	for i = 1, MAX_DISPLAY do
		local label = Instance.new("TextLabel")
		label.Size = UDim2.new(1, 0, 0, 25) -- Full width, height of 25
		label.Position = UDim2.new(0, 0, 0, (i - 1) * 25) -- Stack vertically
		label.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
		label.TextColor3 = Color3.fromRGB(255, 255, 255)
		label.TextSize = 16
		label.Parent = Frame
		table.insert(labels, label)
	end

	-- Create a highlight/selector frame (I am not very proud of this)
	
	highlight.Size = UDim2.new(1, 0, 0, 25)
	highlight.Position = UDim2.new(0, 0, 0, 0) -- Start at the first position
	highlight.BackgroundColor3 = Color3.fromRGB(234, 234, 234)
	highlight.BackgroundTransparency = 0.5
	highlight.Parent = Frame
end

-- Update the TextLabel text and highlight by currentHighlightIndex
local function updateLabels()
	for i, label in ipairs(labels) do
		local cmdIndex = currentTabIndexStart + i - 1 -- Adjust for current displayed tab
		if cmdIndex <= #commands then
			label.Text = commands[cmdIndex].name -- Display only the command name
		else
			label.Text = "" -- Clear label if out of bounds 
			--label.Text = "OutOfSight" -- For debugging purposes
		end
	end

	-- Update highlight position based on currentHighlightIndex
	highlight.Position = UDim2.new(0, 0, 0, (currentHighlightIndex - 1) * 25)

	-- Update the context box with the current command context
	local contextIndex = currentTabIndexStart + currentHighlightIndex - 1
	if commands[contextIndex] then
		contextBox.Text = commands[contextIndex].context -- Update context display
	else
		contextBox.Text = "" -- Clear the context box if out of sight
	end
end

-- Handle Input for navigating the list
local UserInputService = game:GetService("UserInputService")

UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if gameProcessed then return end

	if input.KeyCode == Enum.KeyCode.KeypadTwo then -- Keypad 2 for down
		if currentHighlightIndex < MAX_DISPLAY then
			currentHighlightIndex = currentHighlightIndex + 1
		elseif currentTabIndexStart + MAX_DISPLAY - 1 < #commands then
			currentTabIndexStart = currentTabIndexStart + 1 -- Shift displayed tabs down
		end
	elseif input.KeyCode == Enum.KeyCode.KeypadEight then -- Keypad 8 for up
		if currentHighlightIndex > 1 then
			currentHighlightIndex = currentHighlightIndex - 1
		elseif currentTabIndexStart > 1 then
			currentTabIndexStart = currentTabIndexStart - 1 -- Shift displayed tabs up
		end
	elseif input.KeyCode == Enum.KeyCode.KeypadFive then -- Keypad 5 to execute/select
		if commands[currentTabIndexStart + currentHighlightIndex - 1] ~= nil then
			commands[currentTabIndexStart + currentHighlightIndex - 1].action() -- Execute the selected command
		end
	end

	updateLabels() -- Update the labels and context box
end)

createLabels()
updateLabels()
